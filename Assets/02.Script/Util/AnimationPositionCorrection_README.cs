/*
========================================================================
🎯 2D 애니메이션 위치 보정 시스템 - 사용법 가이드
========================================================================

⚠️ 문제 상황:
아트팀에서 만든 2D 애니메이션 클립(.anim)에 위치 키프레임이 (0,0) 기준이 아닌 
애매한 좌표에서 시작하여, 캐릭터가 예상하지 못한 위치로 이동하는 문제

✅ 해결책:
총 3가지 방법을 제공합니다.

========================================================================
📋 방법 1: Timeline 위치 보정 트랙 (추천)
========================================================================

🔧 사용법:
1. Timeline 에셋을 열고 "+" 버튼 클릭
2. "위치보정트랙" 추가
3. 위치보정클립을 생성하여 애니메이션 클립과 함께 배치
4. Inspector에서 설정:
   - 보정 대상 Transform: 보정할 캐릭터 지정
   - 보정 모드: ToZero (항상 0,0에서 시작) 추천
   - 보정 타이밍: OnStart (클립 시작 시 즉시)
   - 부드러운 보정: 필요시 체크

💡 장점:
- Timeline과 완벽 통합
- 시각적으로 관리 쉬움
- 애니메이션별 개별 설정 가능
- 비파괴적 (원본 .anim 파일 수정 안함)

🎯 적합한 상황:
- Timeline을 사용하는 컷신이나 이벤트
- 복잡한 연출이 필요한 경우
- 애니메이션별로 다른 보정이 필요한 경우

========================================================================
📋 방법 2: Runtime 위치 보정 컴포넌트
========================================================================

🔧 사용법:
1. 캐릭터 GameObject에 "AnimationPositionCorrector" 컴포넌트 추가
2. Inspector에서 설정:
   - 보정 모드: ToZero 추천
   - 애니메이션 감지: 자동 감지 체크
   - 특정 애니메이션만: 필요시 이름 입력
   - Idle 애니메이션 무시: 체크 (대기 애니메이션은 보정 안함)

💡 장점:
- 간단한 설정
- 모든 애니메이션 자동 처리
- Timeline 불필요
- 코드로 수동 제어 가능: corrector.CorrectPosition()

🎯 적합한 상황:
- 단순한 2D 캐릭터 애니메이션
- 모든 애니메이션을 같은 방식으로 보정
- Timeline을 사용하지 않는 게임

========================================================================
📋 방법 3: 애니메이션 클립 일괄 수정 툴
========================================================================

🔧 사용법:
1. Unity 메뉴: Tools > 2D Animation > 위치 키프레임 일괄 처리
2. 처리 모드 선택:
   - OffsetCorrection: 첫 프레임 기준 오프셋 보정 (추천)
   - SetToZero: 모든 키프레임을 (0,0,0)으로
3. "프로젝트에서 모든 .anim 파일 찾기" 클릭
4. ⚠️ "백업 생성" 체크 (필수!)
5. "미리보기" 버튼으로 확인 후
6. "일괄 처리 실행" 클릭

💡 장점:
- 한 번에 모든 애니메이션 수정
- 원본 파일 직접 수정으로 근본 해결
- 백업 자동 생성으로 안전

⚠️ 주의사항:
- 원본 .anim 파일이 수정됨
- 반드시 백업 생성 후 진행
- 팀원들과 사전 협의 필요

🎯 적합한 상황:
- 프로젝트 초기 일괄 정리
- 아트팀과 협의 후 근본적 수정 원할 때
- 레거시 애니메이션 정리

========================================================================
🔄 보정 모드 설명
========================================================================

ToZero: 항상 (0,0,0)에서 시작
- 가장 일반적인 사용법
- 캐릭터가 제자리에서 애니메이션 시작

 ToReference: 지정된 위치에서 시작
 - Transform 드래그앤드롭으로 동적 기준점 설정 가능
 - Transform이 없으면 Vector3 값 사용
 - 특정 위치에서 시작해야 하는 경우
 
 KeepCurrent/KeepOriginal: 현재/원본 위치 유지
 - 애니메이션 오프셋만 제거
 - 캐릭터 위치는 그대로 유지
 
 CustomOffset: 원본 위치 + 커스텀 오프셋
 - 원본 위치에서 일정 거리만큼 떨어진 위치로 보정
 - 정확한 오프셋 값 지정 가능

========================================================================
🚀 추천 워크플로우
========================================================================

1단계: 즉시 해결 (Runtime 컴포넌트)
→ AnimationPositionCorrector를 캐릭터에 추가하여 빠르게 문제 해결

2단계: 정교한 제어 (Timeline 트랙)
→ 컷신이나 특별한 연출이 필요한 부분에 Timeline 트랙 사용

3단계: 근본 해결 (일괄 수정 툴)
→ 아트팀과 협의 후 원본 애니메이션 파일 일괄 수정

========================================================================
🛠️ 디버깅 팁
========================================================================

 1. Scene View에서 Gizmo 확인:
    - AnimationPositionCorrector의 "Show Gizmos" 체크
    - 파란색: 원본 위치
    - 녹색: ToReference 기준 위치
    - 시안색: Transform 참조 표시 (위쪽 선)
    - 마젠타: CustomOffset 적용된 위치
    - 노란색: 오프셋 방향
    - 빨간색: 보정 방향

2. Console 로그 확인:
   - "Show Debug Logs" 체크하여 상세 로그 확인

3. 애니메이션 미리보기:
   - 일괄 처리 툴의 "미리보기" 버튼으로 처리 전 확인

========================================================================
📞 문제 해결
========================================================================

Q: 애니메이션이 보정되지 않아요.
A: 
- Animator 컴포넌트가 있는지 확인
- 타겟 Transform이 올바르게 할당되었는지 확인
- Debug Logs를 켜서 감지 여부 확인

Q: Timeline에서 위치보정트랙이 안 보여요.
A: 
- 프로젝트를 다시 컴파일해보세요 (Ctrl+R)
- Timeline 창을 닫고 다시 열어보세요

 Q: 부드러운 보정이 너무 느려요.
 A: 
 - correctionDuration 값을 줄여보세요 (0.1초 추천)
 - correctionCurve를 조정해보세요
 
 Q: ToReference에서 Transform과 Vector3 중 어느 것이 우선되나요?
 A: 
 - Transform이 할당되어 있으면 Transform 위치를 사용
 - Transform이 null이면 Vector3 referencePosition 값을 사용
 
 Q: CustomOffset 모드는 언제 사용하나요?
 A: 
 - 원본 위치에서 정확히 얼마만큼 떨어진 곳에서 시작해야 할 때
 - 예: 캐릭터가 항상 원본 위치보다 0.5유닛 위에서 시작
 
 ========================================================================
*/ 